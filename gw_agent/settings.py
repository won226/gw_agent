"""
Django settings for gw_agent project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import logging
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Project definition
PROJECT_NAME='gw_agent'
LOG_PATH='/var/log/gw_agent.log'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-q!)lf=_t6ho^_^sfuringhi@=ey5@a&v3rdco$0&fs19#j=or='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_apscheduler',
    'api',
    'cluster',
    'repository',
    'utils',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gw_agent.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gw_agent.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600

# DEBUG LEVEL: DEBUG < INFO < WARNING < ERROR < CRITICAL
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s:%(lineno)s: %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'standard',
            'filename': LOG_PATH,
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR',  # change debug level as appropriate
            'propagate': False,
        },
        PROJECT_NAME: {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'benchmark': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'cluster': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'api': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'repository': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'mqtt': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'restclient': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'common': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'utils': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

def get_logger(app_name):
    """
    get logger with app_name (i.e., api,cluster, benchmark)
    :param app_name:
    :return:
    """
    return logging.getLogger(app_name)

# command executor thread pool
NUMBER_OF_COMMAND_EXECUTORS = 3
NUMBER_OF_EVENT_NOTIFIERS = 1

""" number of MQTT consumers """
NUMBER_OF_MQTT_CONSUMERS = 3

# interval for network watcher thread collector
WATCH_NETWORK_INTERVAL = 3
WATCH_NOTIFIER_INTERVAL = 1
WATCH_COMMON_INTERVAL = 1
WATCH_COMPONENT_INTERVAL = 5

# notifier max retransmission count
NOTIFIER_MAX_RETRANSMISSION_COUNT = 30

# kubernetes configuration
KUBECONFIG_FILE='/etc/kubernetes/admin.conf'

# cluster app config(0: infinity, integer: timeout waiting seconds)
KUBE_API_REQUEST_TIMEOUT=1

# property file
PROPERTY_FILE = os.path.join(BASE_DIR, 'static/config.ini')

# cluster component checklist
COMPONENTS_CHECKLIST_FILE = os.path.join(BASE_DIR, 'static/checklist.json')

# join status file
MULTI_CLUSTER_CONFIG_FILE = os.path.join(BASE_DIR, 'static/multi_cluster_config.json')

# temporary file upload path
TEMP_DIRECTORY = os.path.join(BASE_DIR, 'static/temp')

# kubernetes manifest directory
MANIFEST_DIRECTORY = os.path.join(BASE_DIR, 'static/manifest')

# broker_info file directory
LOCAL_BROKER_INFO = os.path.join(BASE_DIR, 'static/broker_info/local')
REMOTE_BROKER_INFO = os.path.join(BASE_DIR, 'static/broker_info/remote')

# kubernetes bins
CEDGE_BINS = {
    'kubectl': ['/usr/bin/kubectl'],
    'subctl': ['/sbin/subctl'],
    'curl': ['/usr/bin/curl']
}

""" submariner settings """
SUBMARINER_VERSION='0.12.3'
SUBMARINER_CABLE_DRIVER = 'wireguard'
SUBMARINER_JOIN_TIMEOUT = (60*10)   # submariner join timeout(60*10 secs)
SUBMARINER_GW_CONNECT_ERROR_WAIT = 20 # number of wait count for submariner gateway connect error

''' submariner network metric(rx/tx bytes) collection '''
SUBMARINER_DEV = 'submariner'
SUBMARINER_DEV_PATH = '/sys/class/net/submariner'
SUBMARINER_RX = '/sys/class/net/submariner/statistics/rx_bytes'
SUBMARINER_TX = '/sys/class/net/submariner/statistics/tx_bytes'

""" prometheus settings """
PROM_NAMESPACE = 'monitoring'
PROM_SERVICE = 'prometheus-service'
PROM_DEPLOYMENT = 'prometheus-server'
PROM_SERVICE_PORT = 8080

""" prometheus metric settings """
K8S_STATE_METRIC_NAMESPACE = 'kube-system'
K8S_STATE_METRIC_SERVICE = 'kube-state-metrics'
K8S_STATE_METRIC_DEPLOYMENT = 'kube-state-metrics'
K8S_STATE_METRIC_PORT = 8081

NODE_EXPORTER_NAMESPACE = 'monitoring'
NODE_EXPORTER_SERVICE = 'node-exporter'
NODE_EXPORTER_DAEMONSET = 'node-exporter'
NODE_EXPORTER_PORT = 9100

""" multi-cluster NFS volume settings """
NFS_SERVER_STARTUP_TIMEOUT = 10
NFS_SERVER_API_PORT = 8080
NFS_SERVER_NAMESPACE = 'gedge'
NFS_SERVER_SERVICE = 'nfs-server-{cluster_id}'
LOCAL_NFS_SERVER_DOMAIN = 'nfs-server-{cluster_id}.gedge.svc.cluster.local'
REMOTE_NFS_SERVER_DOMAIN = 'nfs-server-{cluster_id}.gedge.svc.clusterset.local'
NFS_MOUNT_DIR_PATH = '/mnt/migrate/{cluster_id}'
NFS_MOUNT_DIR_ACCESS_TIMEOUT = 5*60
SHARED_DIRECTORY_ACCESS_WAIT = 2

""" wait time to reconnect center network """
CENTER_RECONNECT_WAIT_TIME = 30

""" k8s api request timeout """
REST_REQUEST_TIMEOUT = 10

""" monitoring thread join timeout """
THREAD_JOIN_TIMEOUT = 30

""" watchdog thread freezing timeout """
THREAD_FREEZING_TIMEOUT = 10

""" multi-cluster migration """
SNAPSHOT_MANIFEST_TEMPLATE = os.path.join(BASE_DIR, 'static/manifest/migration/snapshot.yaml')
RESTORE_MANIFEST_TEMPLATE = os.path.join(BASE_DIR, 'static/manifest/migration/restore.yaml')

""" MEMORY MANAGER """
DISPLAY_PROCESS_MEMORY = False
MEMORY_CIRCUIT_BREAK_ENABLED = True
MEMORY_CIRCUIT_BREAK_THRESHOLD = 80             # unit %